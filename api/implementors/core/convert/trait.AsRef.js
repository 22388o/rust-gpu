(function() {var implementors = {};
implementors["glam"] = [{"text":"impl AsRef&lt;[f32; 4]&gt; for Mat2","synthetic":false,"types":[]},{"text":"impl AsRef&lt;[f64; 4]&gt; for DMat2","synthetic":false,"types":[]},{"text":"impl AsRef&lt;[f32; 9]&gt; for Mat3","synthetic":false,"types":[]},{"text":"impl AsRef&lt;[f64; 9]&gt; for DMat3","synthetic":false,"types":[]},{"text":"impl AsRef&lt;[f32; 16]&gt; for Mat4","synthetic":false,"types":[]},{"text":"impl AsRef&lt;[f64; 16]&gt; for DMat4","synthetic":false,"types":[]},{"text":"impl AsRef&lt;[f32; 4]&gt; for Quat","synthetic":false,"types":[]},{"text":"impl AsRef&lt;[f64; 4]&gt; for DQuat","synthetic":false,"types":[]},{"text":"impl AsRef&lt;[f32; 2]&gt; for Vec2","synthetic":false,"types":[]},{"text":"impl AsRef&lt;[f64; 2]&gt; for DVec2","synthetic":false,"types":[]},{"text":"impl AsRef&lt;[i32; 2]&gt; for IVec2","synthetic":false,"types":[]},{"text":"impl AsRef&lt;[u32; 2]&gt; for UVec2","synthetic":false,"types":[]},{"text":"impl AsRef&lt;[f32; 3]&gt; for Vec3","synthetic":false,"types":[]},{"text":"impl AsRef&lt;[f32; 3]&gt; for Vec3A","synthetic":false,"types":[]},{"text":"impl AsRef&lt;[f64; 3]&gt; for DVec3","synthetic":false,"types":[]},{"text":"impl AsRef&lt;[i32; 3]&gt; for IVec3","synthetic":false,"types":[]},{"text":"impl AsRef&lt;[u32; 3]&gt; for UVec3","synthetic":false,"types":[]},{"text":"impl AsRef&lt;[f32; 4]&gt; for Vec4","synthetic":false,"types":[]},{"text":"impl AsRef&lt;[f64; 4]&gt; for DVec4","synthetic":false,"types":[]},{"text":"impl AsRef&lt;[i32; 4]&gt; for IVec4","synthetic":false,"types":[]},{"text":"impl AsRef&lt;[u32; 4]&gt; for UVec4","synthetic":false,"types":[]},{"text":"impl AsRef&lt;[bool; 2]&gt; for BVec2","synthetic":false,"types":[]},{"text":"impl AsRef&lt;[bool; 3]&gt; for BVec3","synthetic":false,"types":[]},{"text":"impl AsRef&lt;[bool; 4]&gt; for BVec4","synthetic":false,"types":[]}];
implementors["raw_string"] = [{"text":"impl AsRef&lt;RawStr&gt; for RawStr","synthetic":false,"types":[]},{"text":"impl AsRef&lt;RawStr&gt; for [u8]","synthetic":false,"types":[]},{"text":"impl AsRef&lt;RawStr&gt; for str","synthetic":false,"types":[]},{"text":"impl AsRef&lt;[u8]&gt; for RawStr","synthetic":false,"types":[]},{"text":"impl AsRef&lt;RawStr&gt; for RawString","synthetic":false,"types":[]},{"text":"impl AsRef&lt;[u8]&gt; for RawString","synthetic":false,"types":[]}];
implementors["smallvec"] = [{"text":"impl&lt;A:&nbsp;Array&gt; AsRef&lt;[&lt;A as Array&gt;::Item]&gt; for SmallVec&lt;A&gt;","synthetic":false,"types":[]}];
implementors["spirv_tools"] = [{"text":"impl AsRef&lt;[u32]&gt; for Binary","synthetic":false,"types":[]},{"text":"impl AsRef&lt;[u8]&gt; for Binary","synthetic":false,"types":[]}];
implementors["tempfile"] = [{"text":"impl AsRef&lt;Path&gt; for TempDir","synthetic":false,"types":[]},{"text":"impl AsRef&lt;Path&gt; for TempPath","synthetic":false,"types":[]},{"text":"impl AsRef&lt;OsStr&gt; for TempPath","synthetic":false,"types":[]},{"text":"impl AsRef&lt;Path&gt; for NamedTempFile","synthetic":false,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()